@import url('https://fonts.cdnfonts.com/css/ica-rubrik-black');
@import url('https://fonts.cdnfonts.com/css/poppins');
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&display=swap');

.banner {
    width: 100%;
    height: 100vh;
    text-align: center;
    overflow: hidden;
    position: relative;
}

.banner .slider {
    position: absolute;
    width: 200px;
    height: 200px;
    top: 10%;
    /* 50%将元素左边缘置于容器中心，减去100px（元素宽度的一半）使元素居中 */
    left: calc(50% - 100px);
    transform-style: preserve-3d;
    transform: perspective(1000px);
    /* 利用autoRun以及@keyframes实现3D旋转 */
    animation: autoRun 20s linear infinite;
    z-index: 2;
}

@keyframes autoRun {

    /* 添加persperctive，动画可能会覆盖父元素的设置，因此要确保perspective在过程中保持一致 */
    from {
        transform: perspective(1000px) rotateX(-16deg) rotateY(0deg);
    }

    to {
        transform: perspective(1000px) rotateX(-16deg) rotateY(360deg);
    }
}

.banner .slider .item {
    position: absolute;
    /* 将元素的左边缘置于容器的左边缘，右边缘置于容器的右边缘，顶部和底部边缘分别置于容器的顶部和底部边缘 */
    inset: 0 0 0 0;
    /* 使用3D变换来创建旋转木马效果 */
    transform:
        /* 根据元素的位置计算Y轴旋转角度，实现均匀分布在圆周上 */
        rotateY(calc((var(--position) - 1) * (360deg / var(--quantity))))
        /* 将元素向Z轴正方向移动550px，创造出3D深度效果 */
        /* 每个元素都有自己的空间坐标系，translateZ是向它自己的Z轴移动 */
        translateZ(550px);
}



.banner .slider .item video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 20px;
}

.banner .content {
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: min(1400px, 100vw);
    padding-bottom: 100px;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
    z-index: 1;
}

.banner .content h1 {
    font-family: 'Ica Rubrik';
    font-size: 12em;
    line-height: 1em;
    color: #25283B;
    position: relative;
}

.banner .content h1::after {
    position: absolute;  /* 绝对定位,相对于最近的定位祖先元素 */
    inset: 0 0 0 0;  /* 设置元素的上右下左边距都为0,使其完全覆盖父元素 */
    content: attr(data-content);  /* 使用data-content属性的值作为伪元素的内容 */
    z-index: 2;  /* 设置层级,确保在其他元素之上 */
    -webkit-text-stroke: 2px #d2d2d2;  /* 设置文字描边,宽度为2px,颜色为浅灰色 */
    color: transparent;  /* 设置文字颜色为透明,只显示描边效果 */
}

.banner .content .sub-content {
    font-family: "Poppins", sans-serif;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    width: 20%;
    margin-left: auto;
    /* 将元素置于一行的最右边 */
    color: #708090;
}

.banner .content .sub-content h2 {
    flex-wrap: wrap;
    font-size: 3em;
    margin-right: 20px;
}


.banner .content .model {
    background-image: url(./asset/image/model.png);
    width: 100%;
    height: 75vh;
    position: absolute;
    bottom: 0;
    left: 0;
    background-size: auto 130%;
    background-repeat: no-repeat;
    background-position: top center;
    z-index: 1;/*在h1的上面，在伪元素下面 */
}


.battle-item {
    position: relative;
    z-index: 3;
    margin: 100px;
}

.battle-item p {
    font-family: 'Ica Rubrik', sans-serif;
    font-size: 10em;
    line-height: 1em;
    color: #FFD700;
    text-align: center;
    animation: fireDiv 1s infinite;
}

/* 定义火焰文字动画效果 */
@keyframes fireDiv {
    /* 初始状态 */
    0% {
        text-shadow: 0 0 4px white,        /* 白色光晕 */
                     0 -5px 4px #ff3,      /* 黄色火焰底部 */
                     2px -10px 6px #fd3,   /* 橙色火焰中部 */
                     -2px -15px 11px #f80, /* 深橙色火焰上部 */
                     2px -25px 18px #f20;  /* 红色火焰顶部 */
                    /* 水平偏移 垂直偏移 模糊半径 叠加*/
    }

    /* 25%状态：火焰稍微增强 */
    25% {
        text-shadow: 0 0 4px white,
                     2px -7px 6px #ff3,
                     2px -12px 8px #fd3,
                     -3px -20px 11px #f80,
                     4px -30px 22px #f20;
    }

    /* 50%状态：火焰最强 */
    50% {
        text-shadow: 0 0 4px white,
                     2px -10px 8px #ff3,
                     2px -14px 10px #fd3,
                     -4px -25px 11px #f80,
                     4px -35px 25px #f20;
    }

    /* 75%状态：火焰开始减弱，与25%状态相同 */
    75% {
        text-shadow: 0 0 4px white,
                     2px -7px 6px #ff3,
                     2px -12px 8px #fd3,
                     -3px -20px 11px #f80,
                     4px -30px 22px #f20;
    }

    /* 100%状态：回到初始状态，形成循环 */
    100% {
        text-shadow: 0 0 4px white,
                     0 -5px 4px #ff3,
                     2px -10px 6px #fd3,
                     -2px -15px 11px #f80,
                     2px -25px 18px #f20;
    }
}

.container {
    display: flex;
    width: 90vw;
    height: 70vh;
    justify-content: center;
    align-items: center;
}


.text {
    font-family: 'Ica Rubrik', sans-serif;
    font-size: 2em;
    line-height: 1em;
    color: #4B0082;  /* 紫蓝色 */
    text-align: center;
}


.panel-wrapper {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    height: 60vh;
    border-radius: 30px;
    color: #fff;
    cursor: pointer;
    flex: 0.5;
    margin: 10px;
    position: relative;
    transition: all 700ms ease-in;
    overflow: hidden;
}

.panel {
    width: 100%;
    height: 100%;
    position: relative;
}

.panel h3 {
    font-size: 24px;
    position: absolute;
    bottom: 20px;
    left: 20px;
    margin: 0;
    opacity: 0;
}

.panel-wrapper.active {
    flex: 5;
}

.panel-wrapper.active h3 {
    opacity: 1;
    transition: opacity 0.3s ease-in 0.4s;
}

/* 为面板包装器设置边框效果 */
.panel-wrapper::before,
.panel-wrapper::after,
.panel-wrapper .border-top,
.panel-wrapper .border-bottom {
    content: '';
    position: absolute;
    background: #50dfdb; /* 设置边框颜色 */
    z-index: 1; /* 确保边框在内容之上 */
}

/* 设置垂直边框的基本样式 */
.panel-wrapper::before,
.panel-wrapper::after {
    top: 0;      /* 将伪元素的顶部边缘对齐到父元素的顶部 */
    bottom: 0; /*  /* 将伪元素的底部边缘对齐到父元素的底部，使边框从上到下覆盖整个面板 */
    width: 3px; /* 设置边框宽度 */
}

/* 左侧边框 */
.panel-wrapper::before {
    left: 0;
    transform: scaleY(0); /* 初始状态为不可见 */
    transform-origin: top; /* 从顶部开始变化 */
    animation: borderVertical 4s linear infinite; /* 应用垂直边框动画 */
}

/* 右侧边框 */
.panel-wrapper::after {
    right: 0;
    transform: scaleY(0); /* 初始状态为不可见 */
    transform-origin: bottom; /* 从底部开始变化 */
    animation: borderVertical 4s linear infinite 2s; /* 应用垂直边框动画，延迟2秒 */
}

/* 设置水平边框的基本样式 */
.panel-wrapper .border-top,
.panel-wrapper .border-bottom {
    left: 0;
    right: 0;
    height: 3px; /* 设置边框高度 */
}

/* 顶部边框 */
.panel-wrapper .border-top {
    top: 0;
    transform: scaleX(0); /* 初始状态为不可见 */
    transform-origin: left; /* 从左侧开始变化 */
    animation: borderHorizontal 4s linear infinite; /* 应用水平边框动画 */
}

/* 底部边框 */
.panel-wrapper .border-bottom {
    bottom: 0;
    transform: scaleX(0); /* 初始状态为不可见 */
    transform-origin: right; /* 从右侧开始变化 */
    animation: borderHorizontal 4s linear infinite 2s; /* 应用水平边框动画，延迟2秒 */
}



/* 定义垂直边框动画 */
@keyframes borderVertical {
    /* 动画开始和结束时，边框缩放为0（不可见） */
    0%,
    100% {
        transform: scaleY(0);
    }

    /* 动画中间点，边框完全展开（可见） */
    50% {
        transform: scaleY(1);
    }
}

/* 定义水平边框动画 */
@keyframes borderHorizontal {
    /* 动画开始和结束时，边框缩放为0（不可见） */
    0%,
    100% {
        transform: scaleX(0);
    }

    /* 动画中间点，边框完全展开（可见） */
    50% {
        transform: scaleX(1);
    }
}

.panel video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
}

.panel-text {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}